# .github/workflows/main.yml

# Name of your workflow
name: Dart CI & Deploy to Pages

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Add this permissions block. It's required for the deployment action to work.
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Job 1: Build and Test the application
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout repository
        uses: actions/checkout@v4

      - name: 2. Set up Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: 3. Get dependencies
        run: flutter pub get

      - name: 4. Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: 5. Run tests
        run: flutter test

      # --- New Step: Build the Web App ---
      # Securely injects the API key for the web build
      - name: 6. Build Flutter Web
        run: >
          flutter build web --release
          --dart-define=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}

      # --- New Step: Upload the Web build artifact for the deployment job ---
      - name: 7. Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # The path to the built web app
          path: './build/web'

  # Job 2: Deploy the Web build to GitHub Pages
  deploy_to_pages:
    name: Deploy to Pages
    # This job requires the 'build_and_test' job to succeed first
    needs: build_and_test
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # The URL of the deployed page
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # This action handles the deployment


        # A test comment just to trigger the gh workflow